name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-api:
    name: Build and Test API
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          check-latest: true

      - name: Get dependencies
        working-directory: ./api
        run: go mod download

      - name: Verify dependencies
        working-directory: ./api
        run: go mod verify

      - name: Build
        working-directory: ./api
        run: go build -v ./...

      - name: Run unit tests
        working-directory: ./api
        run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./api/coverage.txt
          fail_ci_if_error: false

  build-frontend:
    name: Build and Test Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linter
        working-directory: ./frontend
        run: npm run lint

      - name: Run tests
        working-directory: ./frontend
        run: npm test -- --coverage

      - name: Build
        working-directory: ./frontend
        run: npm run build

  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Terraform Init
        working-directory: ./provisioning/aws
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: ./provisioning/aws
        run: terraform validate

      - name: Terraform Format Check
        working-directory: ./provisioning
        run: terraform fmt -check -recursive

  k8s-manifests:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Kubeval
        run: |
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          sudo cp kubeval /usr/local/bin

      - name: Validate Kubernetes manifests
        run: find ./kubernetes -name "*.yaml" -type f -exec kubeval --strict --ignore-missing-schemas {} \;

  helm-charts:
    name: Validate Helm Charts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.11.1'

      - name: Validate Helm charts
        run: |
          for dir in ./charts/*; do
            if [ -d "${dir}" ]; then
              echo "Validating Helm chart: ${dir}"
              helm lint "${dir}"
              helm template "${dir}" > /dev/null
            fi
          done

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-api, build-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build API Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./api
          file: ./api/Dockerfile
          push: false
          tags: k8s-env-provisioner/api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: k8s-env-provisioner/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Multi-tenancy Controller Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./multi-tenancy
          file: ./multi-tenancy/Dockerfile
          push: false
          tags: k8s-env-provisioner/multi-tenancy-controller:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kind cluster
        uses: engineerd/setup-kind@v0.5.0
        with:
          version: "v0.17.0"
          config: ./scripts/kind-config.yaml

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.11.1'

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.26.0'

      - name: Run integration tests
        run: ./scripts/run-integration-tests.sh

  notify:
    name: Notify on failure
    runs-on: ubuntu-latest
    needs: [build-api, build-frontend, terraform-validate, k8s-manifests, helm-charts, security-scan, docker-build, integration-test]
    if: failure()

    steps:
      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ci-failures
          SLACK_COLOR: danger
          SLACK_MESSAGE: 'CI Pipeline failed for ${{ github.repository }} on branch ${{ github.ref_name }}'
          SLACK_TITLE: CI Failure
          SLACK_FOOTER: 'K8s Environment Provisioner'